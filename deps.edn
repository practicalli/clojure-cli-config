;; The deps.edn file describes the information needed to build a classpath.
;; Source: https://github.com/practicalli/clojure-deps-edn
;;
;; deps.edn configuration is a combination of
;; - install-level (latest Clojure version at install time)
;; - user level - $HOME/.clojure/deps.edn
;; - project level - deps.edn in root of project
;;
;; For all attributes other than :paths, these config files are merged left to right.
;; Only the last :paths is kept and others are dropped.
;; In an :alias, only the last :main-opts is kept and others are dropped.

;;;; Top level keys include
;; :paths
;; :aliases
;; :mvn/repositories
;; :mvn/local-repo

;; Everything else should be defined within :aliases

{;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; Default Paths
 ;; Directories to include in the classpath to run the application
 ;; Development only paths should be defined in aliases, eg. :env/dev
 ;; Project deps.edn file superceeds this setting
 :paths ["src"]

 ;; End of: Default Paths
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; Main dependencies

 ;; :deps
 ;; ;; Clojure standard library
 ;; {org.clojure/clojure {:mvn/version "1.11.1"}}

 ;; End of: Main dependencies
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 :aliases
 {
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Development environment

  ;; Include `dev` directory on the class path
  ;; Supports the use of `dev/user.clj` to configure REPL startup
  ;; http://practicalli.github.io/clojure/clojure-tools/configure-repl-startup.html

  ;; clojure -M:env/dev
  :env/dev
  {:extra-paths ["dev"]}

  :lib/nrepl
  {:extra-deps {nrepl/nrepl {:mvn/version "0.9.0"}}}

  ;; alpha state software as API has not been finalized however the code works reliably
  ;; Latest commit on add-lib3 branch, don't update with :project/outdated
  ;; Set logging implementation to no-operation
  :lib/hotload
  {:extra-deps {org.clojure/tools.deps.alpha {:git/url "https://github.com/clojure/tools.deps.alpha"
                                              :git/sha     "e4fb92eef724fa39e29b39cc2b1a850567d490dd"}
                org.slf4j/slf4j-nop {:mvn/version "1.7.36"}}}

  ;; Refresh the current namespace in a running REPL
  :lib/tools-ns
  {:extra-deps {org.clojure/tools.namespace {:mvn/version "1.3.0"}}}

  ;; Combination of hotload and tools-ns
  :lib/reloaded
  {:extra-deps {org.clojure/tools.namespace {:mvn/version "1.3.0"}
                org.clojure/tools.deps.alpha {:git/url "https://github.com/clojure/tools.deps.alpha"
                                              :git/sha "e4fb92eef724fa39e29b39cc2b1a850567d490dd"}
                org.slf4j/slf4j-nop {:mvn/version "1.7.36"}}}

  ;; Highlight important aspects of error stack trace using ANSI formatting
  ;; https://github.com/AvisoNovate/pretty
  :lib/pretty-errors
  {:extra-deps {io.aviso/pretty {:mvn/version "1.1.1"}}}

  ;; End of Development environment
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; REPL and nREPL connections

  ;; Built-in Clojure REPL
  ;; Run interactive REPL with nREPL connection
  ;; NOTE: For non-interactive REPL session, use :middleware versions

  ;; Simple nREPL server REPL, headless
  ;; call with -i flag to start interactive client
  :repl/nrepl
  {:extra-deps {nrepl/nrepl {:mvn/version "0.9.0"}}
   :main-opts  ["-m" "nrepl.cmdline"]}

  ;; Interactive client REPL with nREPL server for Clojure Editor support
  :repl/interactive
  {:extra-deps {nrepl/nrepl {:mvn/version "0.9.0"}}
   :main-opts  ["-m" "nrepl.cmdline" --interactive]}

  ;; Headless REPL with nREPL server for Clojure Editor support
  :repl/headless
  {:extra-deps {nrepl/nrepl {:mvn/version "0.9.0"}}
   :main-opts  ["-m" "nrepl.cmdline"]}

  ;; Run an interactive Clojure REPL with nREPL connection and CIDER libraries
  ;; clojure -M:repl/cider
  :repl/cider
  {:extra-deps {nrepl/nrepl       {:mvn/version "0.9.0"}
                cider/cider-nrepl {:mvn/version "0.28.4"}}
   :main-opts  ["-m" "nrepl.cmdline"
                "--middleware" "[cider.nrepl/cider-middleware]"
                "-i"]}

  :repl/cider-refactor
  {:extra-deps {nrepl/nrepl                   {:mvn/version "0.9.0"}
                cider/cider-nrepl             {:mvn/version "0.28.4"}
                refactor-nrepl/refactor-nrepl {:mvn/version "3.5.2"}}
   :main-opts  ["-m" "nrepl.cmdline"
                "--middleware" "[refactor-nrepl.middleware/wrap-refactor,cider.nrepl/cider-middleware]"
                "-i"]}

  ;; clojure -M:repl/cider-cljs
  :repl/cider-cljs
  {:extra-deps {org.clojure/clojurescript       {:mvn/version "1.11.54"}
                nrepl/nrepl                     {:mvn/version "0.9.0"}
                cider/cider-nrepl               {:mvn/version "0.28.4"}
                cider/piggieback                {:mvn/version "0.5.3"}}
   :main-opts  ["-m" "nrepl.cmdline"
                "-i"
                "--middleware" "[cider.nrepl/cider-middleware,cider.piggieback/wrap-cljs-repl]"]}

  :repl/figwheel
  {:extra-deps {org.clojure/clojurescript       {:mvn/version "1.11.54"}
                com.bhauman/figwheel-main       {:mvn/version "0.2.18"}
                nrepl/nrepl                     {:mvn/version "0.9.0"}
                cider/cider-nrepl               {:mvn/version "0.28.4"}
                cider/piggieback                {:mvn/version "0.5.3"}}
   :main-opts  ["-m" "nrepl.cmdline"
                "-i"
                "--middleware" "[cider.nrepl/cider-middleware,cider.piggieback/wrap-cljs-repl]"]}

  ;;;; Rebel Readline enhanced REPL UI
  ;; REPL UI with syntax highlighting, built in docs and a quit command `:repl/quit`

  ;;Clojure REPL with rebel readline with nrepl for editor connection
  ;; https://github.com/bhauman/rebel-readline
  ;; Conjure: opening a Clojure file will automatically connect to the REPL process
  ;; CIDER: run `cider-connect-clj` and select REPL host and port
  ;; Calva: connect to REPL command and select build tool, REPL host and port

  ;; clojure -M:repl/rebel
  :repl/rebel
  {:extra-deps {nrepl/nrepl                {:mvn/version "0.9.0"}
                cider/cider-nrepl          {:mvn/version "0.28.4"}
                com.bhauman/rebel-readline {:mvn/version "0.1.4"}}
   :main-opts  ["-m" "nrepl.cmdline"
                "--middleware" "[cider.nrepl/cider-middleware]"
                "-i"
                "-f" "rebel-readline.main/-main"]}

  ;; Not working!
  ;; :repl/rebel-ns
  ;; {:extra-deps {nrepl/nrepl                {:mvn/version "0.9.0"}
  ;;               cider/cider-nrepl          {:mvn/version "0.28.3"}
  ;;               com.bhauman/rebel-readline {:mvn/version "0.1.4"}}
  ;;  :main-opts  ["-m" "nrepl.cmdline"
  ;;               "--middleware" "[cider.nrepl/cider-middleware]"
  ;;               "-i"
  ;;               "-f" "rebel-readline.main/-main"
  ;;               "-e" "(ns,practicalli.jgit-hack),(alter-var-root,#'*ns*,(constantly,(find-ns,'practicalli.jgit-hack)))"]}

;; ClojureScript REPL with rebel readline with nrepl for editor connection
  ;; https://github.com/bhauman/rebel-readline/tree/master/rebel-readline-cljs
  ;; CIDER: run `cider-connect-cljs` and select REPL host and port, figwheel-main and dev build
  :repl/rebel-cljs
  {:extra-deps {com.bhauman/rebel-readline-cljs {:mvn/version "0.1.4"}}
   :main-opts  ["-m" "rebel-readline-cljs.main"]}

  ;; Requires nashorn in a version of ClojureScript
  ;; WARNING: stack trace - does not run TO DEPRECATE
  :repl/rebel-figwheel
  {:extra-deps {org.clojure/clojurescript       {:mvn/version "1.11.54"} ;; version contains cljs.repl.nashorn
                nrepl/nrepl                     {:mvn/version "0.9.0"}
                com.bhauman/rebel-readline-cljs {:mvn/version "0.1.4"}
                com.bhauman/figwheel-main       {:mvn/version "0.2.18"}
                cider/cider-nrepl               {:mvn/version "0.28.4"}
                cider/piggieback                {:mvn/version "0.5.3"}}
   :main-opts  ["-m" "nrepl.cmdline"
                "-i"
                "--middleware" "[cider.nrepl/cider-middleware,cider.piggieback/wrap-cljs-repl]"
                "-f" "rebel-readline.cljs.main/-main"]}

  ;; rebel readline with reveal data visualization
  ;; NOTE: :repl/revel-reveal alias is very much a hack and not a good example to follow
  ;; clojure -M:repl/rebel-reveal
  :repl/rebel-reveal
  {:extra-deps
   {vlaaad/reveal              {:mvn/version "1.3.273"}
    com.bhauman/rebel-readline {:mvn/version "0.1.4"}}
   :jvm-opts  ["-Dvlaaad.reveal.prefs={:theme,:light,:font-family,\"https://ff.static.1001fonts.net/u/b/ubuntu.mono.ttf\",:font-size,32}"]
   :main-opts ["-e" "(require,'rebel-readline.core),(require,'rebel-readline.clojure.line-reader),(require,'rebel-readline.clojure.service.local),(require,'rebel-readline.clojure.main),(require,'vlaaad.reveal)(rebel-readline.core/with-line-reader,(rebel-readline.clojure.line-reader/create,(rebel-readline.clojure.service.local/create)),(vlaaad.reveal/repl,:prompt,(fn,[]),:read,(rebel-readline.clojure.main/create-repl-read)))"]}

  ;; clojure -M:repl/reveal-light-rebel
  :repl/rebel-reveal-light
  {:extra-deps
   {vlaaad/reveal              {:mvn/version "1.3.273"}
    com.bhauman/rebel-readline {:mvn/version "0.1.4"}}
   :jvm-opts  ["-Dvlaaad.reveal.prefs={:theme,:light,:font-family,\"https://ff.static.1001fonts.net/u/b/ubuntu.mono.ttf\",:font-size,32}"]
   :main-opts ["-e" "(require,'rebel-readline.core),(require,'rebel-readline.clojure.line-reader),(require,'rebel-readline.clojure.service.local),(require,'rebel-readline.clojure.main),(require,'vlaaad.reveal)(rebel-readline.core/with-line-reader,(rebel-readline.clojure.line-reader/create,(rebel-readline.clojure.service.local/create)),(vlaaad.reveal/repl,:prompt,(fn,[]),:read,(rebel-readline.clojure.main/create-repl-read)))"]}

  :lib/rebel
  {:extra-deps {com.bhauman/rebel-readline {:mvn/version "0.1.4"}}}

  ;; End of REPL and nREPL connections
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;; Remote REPL connection
  ;; Connect to the nREPL server of a remote REPL
  ;; clojure -M:repl/remote --host hostname --port 12345
  ;; replace --host and --port values with that of remote nREPL server
  :repl/remote
  {:extra-deps {nrepl/nrepl {:mvn/version "0.9.0"}}
   :main-opts ["-m" "nrepl.cmdline"
               "--connect"]}

  ;; clojure -M:repl/rebel-remote --host hostname --port 12345
  :repl/rebel-remote
  {:extra-deps {nrepl/nrepl                {:mvn/version "0.9.0"}
                cider/cider-nrepl          {:mvn/version "0.28.4"}
                com.bhauman/rebel-readline {:mvn/version "0.1.4"}}
   :main-opts  ["-m" "nrepl.cmdline"
                "--connect"
                "--middleware" "[cider.nrepl/cider-middleware]"
                "-i"
                "-f" "rebel-readline.main/-main"]}

  ;; End of remote REPL connections
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Alternative REPLs - not extensively tested

  ;; Clojure Socket REPL on port 55555:
  ;; clojure -X:repl/socket
  :repl/socket
  {:exec-fn clojure.core.server/start-server
   :exec-args {:name "repl-server"
               :port 55555
               :accept clojure.core.server/repl
               :server-daemon false}}

  ;; Older Socket REPL approaches to review:

  ;; clojure -M:repl/socket-jvm-opts (lesser used approach)
  :repl/socket-jvm-opts
  {:jvm-opts ["-Dclojure.server.repl={:port,50505,:accept,clojure.core.server/repl}"]}

  ;; Clojure Socket REPL on an available port, displaying port number (container/cloud environments)
  ;; - specify -r to start a repl
  :repl/socket-zero
  {:jvm-opts  ["-Dclojure.server.repl={:port,0,:accept,clojure.core.server/repl}"]
   :main-opts ["-e" "(.getLocalPort,(get-in,@#'clojure.core.server/servers,[\"repl\",:socket]))"]}

  ;; ClojureScript (node) Socket REPL on port 55555:
  ;; clojure -M:repl/socket-cljs
  :repl/socket-node
  {:jvm-opts ["-Dclojure.server.repl={:port,55555,:accept,cljs.server.node/repl}"]}

  ;; ClojureScript (browser) Socket REPL on port 58585:
  ;; clojure -M:repl/socket-cljs
  :repl/socket-browser
  {:jvm-opts ["-Dclojure.server.repl={:port,58585,:accept,cljs.server.browser/repl}"]}

  ;; tubular - socket repl client
  ;; https://github.com/mfikes/tubular
  ;; Connect to a socket repl, e.g. :repl/socket
  ;; clojure -M:repl/socket-client
  :repl/socket-client
  {:extra-deps {tubular/tubular {:mvn/version "1.4.0"}}
   :main-opts  ["-m" "tubular.core"
                "-p" "55555"]}

  ;; Start a Clojure Socket pREPL on port 40404:
  ;; clojure -M:repl/prepl
  :repl/prepl
  {:jvm-opts ["-Dclojure.server.repl={:port,40404,:accept,clojure.core.server/io-prepl}"]}

  ;; Start a ClojureScript Socket pREPL on port 44444:
  :repl/prepl-cljs
  ;; clojure -M:repl/prepl-cljs
  {:jvm-opts ["-Dclojure.server.repl={:port,44444,:accept,cljs.server.browser/prepl}"]}

  ;; End of Alternative REPL's
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Creating projects from templates

  ;; clj-new - https://github.com/seancorfield/clj-new

  ;; Classic command line
  ;; clojure -M:project/new luminus practicalli/full-stack-app +http-kit +h2 +reagent +auth

  ;; Edn command line arguments
  ;; clojure -X:project/new  ;; library project called playground
  ;; clojure -X:project/new :name practicalli/my-library
  ;; clojure -X:project/new :template app :name practicalli/my-application
  ;; clojure -X:project/new :template luminus :name practicalli/full-stack-app +http-kit +h2 +reagent +auth

  :project/new
  {:replace-deps {com.github.seancorfield/clj-new {:mvn/version "1.2.381"}}
   :exec-fn      clj-new/create
   :exec-args    {:template lib :name practicalli/playground}
   :main-opts    ["-m" "clj-new.create"]}

  ;; ALPHA status: Add 'something' to existing project (subject to change)
  :project/add
  {:replace-deps {com.github.seancorfield/clj-new {:mvn/version "1.2.381"}}
   :exec-fn      clj-new/generate
   :main-opts    ["-m" "clj-new.generate"]}

  ;; Convert Leiningen projects to Clojure CLI with depify
  ;; Use `lein pprint` when `project.clj` includes quoted variables or paths to resolve
  ;; `lein pprint | clojure -M:project/depify`
  :project/depify
  {:extra-deps {depify/depify {:git/url "https://github.com/hagmonk/depify"
                               :git/sha     "b3f61517c860518c1990133aa6eb54caf1e4d591"}}
   :main-opts  ["-m" "depify.project"]}

;; End of: Creating projects from templates
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Searching

  ;; clj-check - search each namespace and report compilation warnings and errors
  ;; https://github.com/athos/clj-check
  ;; clojure -M:search/errors
  :search/errors
  {:extra-deps {athos/clj-check
                {:git/url "https://github.com/athos/clj-check.git"
                 :sha     "518d5a1cbfcd7c952f548e6dbfcb9a4a5faf9062"}}
   :main-opts  ["-m" "clj-check.check"]}

  ;; find-deps - fuzzy search Maven & Clojars and add deps to deps.edn
  ;; https://github.com/hagmonk/find-deps
  ;; clojure -M:search/libraries http-kit  # fuzzy search for dependency
  ;; clojure -M:search/libraries http-kit ring compojure # multiple deps
  ;; clojure -M:search/libraries --format:merge http-kit # merge dep into deps.edn file
  :search/libraries
  {:extra-deps
   {find-deps/find-deps
    {:git/url "https://github.com/hagmonk/find-deps"
     :sha     "9bf23a52cb0a8190c9c2c7ad1d796da802f8ce7a"}}
   :main-opts ["-m" "find-deps.core"]}

  ;; Dependency version management
  ;; https://github.com/liquidz/antq
  ;; Manage versions for maven and git dependencies

  ;; - report project dependencies that have newer versions available:
  ;; cd project-directory && clojure -T:search/outdated
  ;; - update library versions in this deps.edn file:
  ;; cd $XDG_CONFIG_HOME/clojure && clojure -T:search/outdated
  :search/outdated
  {:replace-paths ["."]
   :replace-deps  {com.github.liquidz/antq {:mvn/version "1.6.774"}
                   org.slf4j/slf4j-nop     {:mvn/version "1.7.36"}}
   :exec-fn antq.tool/outdated
   :exec-args {:directory ["."] ; default
               :exclude ["com.cognitect/rebl"
                         "org.openjfx/javafx-base"
                         "org.openjfx/javafx-controls"
                         "org.openjfx/javafx-fxml"
                         "org.openjfx/javafx-swing"
                         "org.openjfx/javafx-web"]
               ;; :focus ["com.github.liquidz/antq"]
               :skip ["boot" "leiningen"]
               :reporter "table" ; json edn format
               :verbose false
               :upgrade false
               :force   false}}

  :hack/antq
  {:replace-deps
   {antq/antq {:local/root "/home/practicalli/projects/clojure/community-tools/antq"}}
   :main-opts ["-m" "antq.core"]}

  ;; The classic project for checking maven based dependencies
  ;; clojure -M:search/outdated-mvn
  ;; DEPRECATE
  :search/outdated-mvn
  {:replace-paths []
   :replace-deps  {deps-ancient/deps-ancient {:mvn/version "0.0.5"}}
   :main-opts     ["-m" "deps-ancient.deps-ancient"]}

  ;; Carve - search through code for unused vars and remove them
  ;; clojure -M:search/unused-vars --opts '{:paths ["src" "test"]}'
  :search/unused-vars
  {:extra-deps {borkdude/carve
                {:git/url "https://github.com/borkdude/carve"
                 :sha     "df552797a198b6701fb2d92390fce7c59205ea77"}}
   :main-opts  ["-m" "carve.main"]}


  ;; End of: Projects and dependencies
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Project Packaging

  ;; depstar - build jars, uberjars
  ;; https://github.com/seancorfield/depstar
  ;; over-ride the :main-class as the name is unlikely to match your project

  ;; Jar archive of the project
  ;; clojure -X:project/jar :main-class domain.application
  ;; clojure -X:project/jar :jar '"project-name.jar"' :main-class domain.application
  :project/jar
  {:replace-deps {com.github.seancorfield/depstar {:mvn/version "2.1.303"}}
   :exec-fn      hf.depstar/jar
   :exec-args    {:jar "project.jar"
                  :aot true}}

  ;; Uberjar archive of the project, including Clojure runtime
  ;; clojure -X:project/uberjar :main-class domain.application
  ;; clojure -X:project/uberjar :jar '"project-name.jar"' :main-class domain.application
  :project/uberjar
  {:replace-deps {com.github.seancorfield/depstar {:mvn/version "2.1.303"}}
   :exec-fn      hf.depstar/uberjar
   :exec-args    {:jar "uber.jar"
                  :aot true}}

  ;; End of project packaging
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Project Deployment
  ;; local and remote deployment of Java archives

  ;; Clojure CLI tools - built in alias to deploy locally (in `~/.m2/`)
  ;; clojure -X:deps mvn-install

  ;; deps-deploy - Deploy libraries to Clojars
  ;; https://github.com/slipset/deps-deploy
  ;; Deploy to Clojars
  ;; `clojure -M:project/clojars project.jar`
  ;; Deploy to Clojars signed
  ;; `clojure -M:project/clojars-signed project.jar`
  ;;
  ;; Set Clojars username/token in `CLOJARS_USERNAME` and `CLOJARS_PASSWORD`
  ;; environment variables.
  ;; Set fully qualified artifact-name and version in project `pom.xml` file

  :project/clojars
  {:replace-paths []
   :replace-deps  {slipset/deps-deploy {:mvn/version "0.2.0"}}
   :main-opts     ["-m" "deps-deploy.deps-deploy"
                   "deploy"]}

  :project/clojars-signed
  {:replace-paths []
   :replace-deps  {slipset/deps-deploy {:mvn/version "0.2.0"}}
   :main-opts     ["-m" "deps-deploy.deps-deploy"
                   "deploy"
                   :true]}

  ;; End of Project Deployment
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Java Sources

  ;; Look up Java Class and method definitions, eg. `cider-find-var` in Emacs
  ;; Requires: Java sources installed locally e.g. sudo apt install openjdk-17-source
  ;; Examples are from Ubuntu package install locations

  ;; clojure -M:lib/java17-source
  :src/java8
  {:extra-deps
   {openjdk/java-sources {:local/root "/usr/lib/jvm/openjdk-8/lib/src.zip"}}}

  :src/java11
  {:extra-deps
   {openjdk/java-sources {:local/root "/usr/lib/jvm/openjdk-11/lib/src.zip"}}}

  :src/java17
  {:extra-deps
   {openjdk/java-sources {:local/root "/usr/lib/jvm/openjdk-17/lib/src.zip"}}}

  ;; Clojure core Java source code in src/jvm/clojure/lang/
  :src/clojure
  {:extra-paths ["src/jvm"]
   :extra-deps
   {org.clojure/source {:local/root "~/projects/community/clojure.org/clojure"}}}
  ;; End of: Java Sources
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Formatting tools

  ;; pretty printing with sorted keys and set values
  ;; include as a library when starting a project
  :lib/pprint-sorted
  {:extra-deps {mvxcvi/puget {:mvn/version "1.3.2"}}}

  ;; pretty printing capabilities for Clojure code and EDN
  ;; clojure -M:data/zprint filename
  :format/zprint
  {:extra-deps {zprint/zprint {:mvn/version "1.2.3"}}
   :main-opts  ["-m" "zprint.main"]}

  ;; check and fix Clojure formatting with cljfmt:
  ;; https://github.com/weavejester/cljfmt

  ;; cljfmt-check - check/report formatting issues
  :format/cljfmt-check
  {:extra-deps {cljfmt/cljfmt {:mvn/version "0.8.0"}}
   :main-opts ["-m" "cljfmt.main" "check"]}

  ;; cljfmt-check - check/report formatting issues
  :format/cljfmt-fix
  {:extra-deps {cljfmt/cljfmt {:mvn/version "0.8.0"}}
   :main-opts ["-m" "cljfmt.main" "fix"]}

  ;; End of: Formatting tools
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Databases and drivers uses only during development

  :lib/next.jdbc
  {:extra-deps {com.github.seancorfield/next.jdbc {:mvn/version "1.2.780"}}}

  ;; H2 embedded database
  :database/h2
  {:extra-deps {com.h2database/h2                 {:mvn/version "2.1.212"}
                com.github.seancorfield/next.jdbc {:mvn/version "1.2.780"}}}

  ;; End of Databases and drivers uses only during development
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Data inspectors / visualizers

  ;; Portal
  ;; Navigate data - edn, json, transit
  ;; https://github.com/djblue/portal

  :inspect/portal-cli
  {:extra-deps {djblue/portal {:mvn/version "0.26.0"}}}

  :inspect/portal-web
  {:extra-deps {djblue/portal             {:mvn/version "0.26.0"}
                org.clojure/clojurescript {:mvn/version "1.11.54"}}
   :main-opts  ["-m" "cljs.main"]}

  :inspect/portal-node
  {:extra-deps {djblue/portal             {:mvn/version "0.26.0"}
                org.clojure/clojurescript {:mvn/version "1.11.54"}}
   :main-opts  ["-m" "cljs.main" "-re" "node"]}

  ;; REBL Data browser - TO DEPRECATE
  ;; https://github.com/practicalli/clojure-deps-edn#cognitect-rebl
  ;; http://practicalli.github.io/clojure/alternative-tools/clojure-tools/cognitect-rebl.html
  ;; Requires Clojure 1.10 or greater
  ;; Requires Cognitect dev-tools https://cognitect.com/dev-tools/index.html
  ;; :inspect/rebl-java8   (Oracle JDK 8 only)
  ;; :inspect/rebl         (Any JDK 11 distribution - tested with OpenJDK)

  ;; :inspect/rebl
  ;; {:extra-deps {com.cognitect/rebl          {:mvn/version "0.9.241"}
  ;;               org.clojure/core.async      {:mvn/version "1.3.618"}
  ;;               org.openjfx/javafx-fxml     {:mvn/version "11.0.1"}
  ;;               org.openjfx/javafx-controls {:mvn/version "11.0.1"}
  ;;               org.openjfx/javafx-swing    {:mvn/version "11.0.1"}
  ;;               org.openjfx/javafx-base     {:mvn/version "11.0.1"}
  ;;               org.openjfx/javafx-web      {:mvn/version "11.0.1"}
  ;;               ;; deps for file datafication (REBL 0.9.149 or later)
  ;;               org.clojure/data.csv        {:mvn/version "1.0.0"}
  ;;               org.clojure/data.json       {:mvn/version "2.4.0"}
  ;;               org.yaml/snakeyaml          {:mvn/version "1.28"}}
  ;;  :main-opts  ["-m" "cognitect.rebl"]}

  ;; :inspect/rebl-java8
  ;; {:extra-deps {com.cognitect/rebl {:mvn/version "0.9.241"}}
  ;;  :main-opts  ["-m" "cognitect.rebl"]}


  ;; Reveal - read evaluate visualize loop
  ;; A REPL environment with data visualization and exploration
  ;; http://practicalli.github.io/clojure/clojure-tools/data-browsers/reveal.html
  ;; clojure -X:inspect/reveal
  ;; Run with theme / font changes:
  ;; clojure -X:inspect/reveal-light
  ;; Use with rebel repl by adding and using tap>
  ;; clojure -M:inspect/reveal-rebel
  ;; clojure -M:inspect/reveal:rebel -J-Dvlaaad.reveal.prefs='{:theme :light :font-family "Ubuntu Mono" :font-size 32}'

  :inspect/reveal
  {:extra-deps {vlaaad/reveal {:mvn/version "1.3.273"}}
   :exec-fn    vlaaad.reveal/repl
   :main-opts  ["-m" "vlaaad.reveal" "repl"]}

  :inspect/reveal-light
  {:extra-deps {vlaaad/reveal {:mvn/version "1.3.273"}}
   :exec-fn    vlaaad.reveal/repl
   :jvm-opts   ["-Dvlaaad.reveal.prefs={:theme,:light,:font-family,\"https://ff.static.1001fonts.net/u/b/ubuntu.mono.ttf\",:font-size,32}"]
   :main-opts  ["-m" "vlaaad.reveal" "repl"]}


  ;; Not sending all evaluations to Reveal
  ;; It does send tap> results to Reveal
  ;; :repl/reveal-rebel-nrepl
  ;; {:extra-deps {nrepl/nrepl                {:mvn/version "0.9.0"}
  ;;               cider/cider-nrepl          {:mvn/version "0.28.3"}
  ;;               vlaaad/reveal              {:mvn/version "1.3.273"}
  ;;               com.bhauman/rebel-readline {:mvn/version "0.1.4"}}
  ;;  :jvm-opts   ["-Dvlaaad.reveal.prefs={:theme,:light,:font-family,\"https://ff.static.1001fonts.net/u/b/ubuntu.mono.ttf\",:font-size,32}"]
  ;;  :main-opts  ["-m" "nrepl.cmdline"
  ;;               "--middleware" "[cider.nrepl/cider-middleware,vlaaad.reveal.nrepl/middleware]"
  ;;               "-f" "rebel-readline.main/-main"]}

  :inspect/reveal-local ;; Hacking the project
  {:extra-deps {vlaaad/reveal
                {:local/root "/home/practicalli/projects/clojure/visualization/reveal/"}}
   :main-opts  ["-m" "vlaaad.reveal" "repl"]}


  ;; Reveal with Clojure editors
  ;; clj -M:inspect/reveal-nrepl
  ;; add the -i flag for interactive REPL client
  ;; Reveal REPL with nrepl server, connect to from a Clojure aware editor
  :inspect/reveal-nrepl
  {:extra-deps {vlaaad/reveal {:mvn/version "1.3.273"}
                nrepl/nrepl   {:mvn/version "0.9.0"}}
   :main-opts  ["-m" "nrepl.cmdline"
                "--middleware" "[vlaaad.reveal.nrepl/middleware]"]}

  ;; Light version of :inspect/reveal-nrepl
  :inspect/reveal-light-nrepl
  {:extra-deps {vlaaad/reveal {:mvn/version "1.3.273"}
                nrepl/nrepl   {:mvn/version "0.9.0"}}
   :jvm-opts   ["-Dvlaaad.reveal.prefs={:theme,:light,:font-family,\"https://ff.static.1001fonts.net/u/b/ubuntu.mono.ttf\",:font-size,32}"]
   :main-opts  ["-m" "nrepl.cmdline"
                "--middleware" "[vlaaad.reveal.nrepl/middleware]"]}

  ;; Reveal with headless nrepl server and Emacs CIDER specific middleware
  ;; Use with `C-u cider-jack-in-clj` or `SPC u , '` on Spacemacs
  ;; Edit jack-in command: clojure -M:inspect/reveal-cider
  :inspect/reveal-cider
  {:extra-deps {vlaaad/reveal                 {:mvn/version "1.3.273"}
                nrepl/nrepl                   {:mvn/version "0.9.0"}
                cider/cider-nrepl             {:mvn/version "0.28.4"}
                refactor-nrepl/refactor-nrepl {:mvn/version "3.5.2"}}
   :main-opts  ["-m" "nrepl.cmdline"
                "--middleware" "[vlaaad.reveal.nrepl/middleware,refactor-nrepl.middleware/wrap-refactor,cider.nrepl/cider-middleware]"]}

  ;; Light version. Jack-in command: clojure -M:inspect/reveal-light-cider
  :inspect/reveal-light-cider
  {:extra-deps {vlaaad/reveal                 {:mvn/version "1.3.273"}
                nrepl/nrepl                   {:mvn/version "0.9.0"}
                cider/cider-nrepl             {:mvn/version "0.28.4"}
                refactor-nrepl/refactor-nrepl {:mvn/version "3.5.2"}}
   :jvm-opts   ["-Dvlaaad.reveal.prefs={:theme,:light,:font-family,\"https://ff.static.1001fonts.net/u/b/ubuntu.mono.ttf\",:font-size,32}"]
   :main-opts  ["-m" "nrepl.cmdline"
                "--middleware" "[vlaaad.reveal.nrepl/middleware,refactor-nrepl.middleware/wrap-refactor,cider.nrepl/cider-middleware]"]}

  ;; End of Data inspectors
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Debug Tools

  :lib/sayid
  {:extra-deps {com.billpiel/sayid {:mvn/version "0.1.0"}}}

  ;; End of Debug Tools
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Middleware

  ;; - start a non-interactive REPL with a headless nREPL server
  ;; clojure -M:middleware/nrepl
  :middleware/nrepl
  {:extra-deps {nrepl/nrepl {:mvn/version "0.9.0"}}
   :main-opts  ["-m" "nrepl.cmdline"]}

  ;; Run a REPL using nREPL server for access by cider-connect-clj
  ;; clojure -M:middleware/cider-clj
  :middleware/cider-clj
  {:extra-deps {nrepl/nrepl       {:mvn/version "0.9.0"}
                cider/cider-nrepl {:mvn/version "0.28.4"}}
   :main-opts  ["-m" "nrepl.cmdline"
                "--middleware" "[cider.nrepl/cider-middleware]"]}

  :middleware/cider-clj-refactor
  {:extra-deps {nrepl/nrepl                   {:mvn/version "0.9.0"}
                refactor-nrepl/refactor-nrepl {:mvn/version "3.5.2"}
                cider/cider-nrepl             {:mvn/version "0.28.4"}}
   :main-opts  ["-m" "nrepl.cmdline"
                "--middleware" "[refactor-nrepl.middleware/wrap-refactor,cider.nrepl/cider-middleware]"]}

  ;; Run a REPL using nREPL server for access by cider-connect-cljs
  ;; clojure -M:middleware/cider-cljs
  ;; Using figwheel-main template and cider-connect-cljs: clojure -M:middleware/cider-cljs:fig
  :middleware/cider-cljs
  {:extra-deps {org.clojure/clojurescript {:mvn/version "1.11.54"}
                nrepl/nrepl               {:mvn/version "0.9.0"}
                cider/cider-nrepl         {:mvn/version "0.28.4"}
                cider/piggieback          {:mvn/version "0.5.3"}}
   :main-opts  ["-m" "nrepl.cmdline"
                "--middleware" "[cider.nrepl/cider-middleware,cider.piggieback/wrap-cljs-repl]"]}

  ;; nrebl.middleware - REBL with nREPL server
  ;; visualize evaluations over nREPL in REBL data browser (CIDER, Calva)
  ;; https://github.com/RickMoynihan/nrebl.middleware
  ;; Emacs cider `dir-locals.el` configuration
  ;; ((clojure-mode . ((cider-clojure-cli-global-options . "-M:lib/cider-nrepl:inspect/rebl:middleware/nrebl"))))

  ;; clojure -M:lib/cider-nrepl:inspect/rebl:middleware/nrebl
  :middleware/nrebl
  {:extra-deps {rickmoynihan/nrebl.middleware {:mvn/version "0.3.1"}}
   :main-opts  ["-e" "((requiring-resolve,'cognitect.rebl/ui))"
                "-m" "nrepl.cmdline"
                "-i"
                "--middleware" "[nrebl.middleware/wrap-nrebl,cider.nrepl/cider-middleware]"]}

  ;; Supporting aliases for nrebl.middleware
  :lib/cider-nrepl
  {:extra-deps {nrepl/nrepl                   {:mvn/version "0.9.0"}
                cider/cider-nrepl             {:mvn/version "0.28.4"}
                refactor-nrepl/refactor-nrepl {:mvn/version "3.5.2"}}}

  ;; End of: Middleware
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Clojure Specifications

  ;; Clojure spec test.check (clojure spec included in Clojure 1.9 onwards)
  :lib/spec-test
  {:extra-deps
   {org.clojure/test.check {:mvn/version "1.1.1"}}}

  ;; Clojure spec 2 - under active development
  ;; https://github.com/clojure/spec-alpha2
  ;; latest commit SHA is returned by the command
  ;; git ls-remote https://github.com/clojure/spec-alpha2.git refs/heads/master
  :lib/spec2
  {:extra-deps {org.clojure/spec-alpha2
                {:git/url "https://github.com/clojure/spec-alpha2"
                 :sha     "99456b1856a6fd934e2c30b17920bd790dd81775"}}}

  ;; End of Clojure Specifications
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Testing frameworks

  ;; Include the test directory on the class path
  ;; Humane test output for pretty printed results
  :env/test
  {:extra-paths ["test"]
   :extra-deps  {pjstadig/humane-test-output {:mvn/version "0.11.0"}
                 org.clojure/test.check {:mvn/version "1.1.1"}}}

  :lib/ring-mock
  {:extra-deps {ring/ring-mock         {:mvn/version "0.4.0"}}}

  ;; Expectations test framework
  ;; https://github.com/clojure-expectations/clojure-test
  ;; Example usage:
  ;; clojure -A:expectations:test/cognitect
  :lib/expectations
  {:extra-deps {expectations/clojure-test {:mvn/version "1.2.1"}}}

  ;; Classic version not compatible with clojure.test and tools
  ;; https://github.com/clojure-expectations/expectations
  :lib/expectations-classic
  {:extra-deps {expectations/expectations {:mvn/version "2.1.10"}}}

  ;; End of: Testing frameworks
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Test runners

  ;; Cognitect test-runner
  ;; https://github.com/cognitect-labs/test-runner
  ;; clojure -X:test/cognitect
  :test/cognitect
  {:extra-paths ["test"]
   :extra-deps  {io.github.cognitect-labs/test-runner
                 {:git/tag "v0.5.1" :git/sha "dfb30dd"}}
   :main-opts   ["-m" "cognitect.test-runner"]
   :exec-fn cognitect.test-runner.api/test}

  ;; ClojureScript test runner
  ;; https://github.com/Olical/cljs-test-runner
  :test/cljs
  {:extra-paths ["test"]
   :extra-deps  {olical/cljs-test-runner {:mvn/version "3.8.0"}}
   :main-opts   ["-m" "cljs-test-runner.main"]}

  ;; kaocha - comprehensive test runner for Clojure/Script
  ;; tests.edn should be created for each project
  ;; https://github.com/lambdaisland/kaocha

  ;; Default test runner using kaocha (change to your own preference)
  ;; clojure -X:test/run
  :test/run
  {:extra-paths ["test"]
   :extra-deps {lambdaisland/kaocha {:mvn/version "1.66.1034"}}
   :main-opts   ["-m" "kaocha.runner"]
   :exec-fn kaocha.runner/exec-fn
   :exec-args {}}

  ;; Kaocha test runner in watch mode
  ;; clojure -X:test/watch
  :test/watch
  {:extra-paths ["test"]
   :extra-deps {lambdaisland/kaocha {:mvn/version "1.66.1034"}}
   :main-opts   ["-m" "kaocha.runner" "--watch" "--fail-fast" "--skip-meta" ":slow"]
   :exec-fn kaocha.runner/exec-fn
   :exec-args {:watch? true
               :randomize? false
               :fail-fast? true}}

  ;; Experiment: test using alternative configuration
  :test/kaocha-global
  {:extra-paths ["test"]
   :extra-deps {lambdaisland/kaocha {:mvn/version "1.66.1034"}}
   :exec-fn kaocha.runner/exec-fn
   :exec-args {:config-file ["~/.clojure/kaocha-global-tests.edn"]}}

  ;; clojure -X:test/kaocha
  :test/kaocha
  {:extra-paths ["test"]
   :extra-deps {lambdaisland/kaocha {:mvn/version "1.66.1034"}}
   :main-opts   ["-m" "kaocha.runner"]
   :exec-fn kaocha.runner/exec-fn
   :exec-args {}}

  ;; clojure -X:test/kaocha-watch
  :test/kaocha-watch
  {:extra-paths ["test"]
   :extra-deps  {lambdaisland/kaocha {:mvn/version "1.66.1034"}}
   :main-opts   ["-m" "kaocha.runner" "--watch" "--fail-fast" "--skip-meta" ":slow"]
   :exec-fn kaocha.runner/exec-fn
   :exec-args {:watch? true
               :randomize? false
               :fail-fast? true}}

  ;; clojure -M:test/kaocha-cljs
  :test/kaocha-cljs
  {:extra-paths ["test"]
   :extra-deps  {lambdaisland/kaocha      {:mvn/version "1.66.1034"}
                 lambdaisland/kaocha-cljs {:mvn/version "1.0.113"}}
   :main-opts   ["-m" "kaocha.runner" "unit-cljs"]}

  ;; https://github.com/lambdaisland/kaocha-cucumbe
  ;; - used for kaocha-runner.el to run Kaocha test runner in Emacs Cider
  :lib/kaocha
  {:extra-deps {lambdaisland/kaocha {:mvn/version "1.66.1034"}}}

  ;; End of Test runners
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Test Coverage tools

  ;; Cloverage - Simple clojure coverage tool
  ;; https://github.com/cloverage/cloverage
  ;; In the root of your Clojure project, run the command:
  ;; clojure -M:test/coverage
  ;; clojure -X:test/coverage
  :test/cloverage
  {:extra-paths ["test"]
   :extra-deps  {cloverage/cloverage {:mvn/version "1.2.4"}}
   :main-opts   ["-m" "cloverage.coverage"
                 "--src-ns-path" "src"
                 "--test-ns-path" "test"]
   :exec-fn     cloverage.coverage/run-project
   :exec-args   {:src-ns-path  ["src"]
                 :test-ns-path ["test"]}}

  ;; End of Test Coverage tools
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Linting/ static analysis

  ;; clj-kondo - comprehensive and fast linter
  ;; https://github.com/borkdude/clj-kondo/
  :lint/clj-kondo
  {:extra-deps {clj-kondo/clj-kondo {:mvn/version "2022.04.25"}}
   :main-opts  ["-m" "clj-kondo.main" "--lint" "src"]}

  ;; Eastwood - lint tool based on tools.analyzer.jvm
  :lint/eastwood
  {:extra-deps {jonase/eastwood {:mvn/version "1.2.3"}}
   ;; Eastwood accurately infers source/test paths, so they are best left unspecified:
   :main-opts  ["-m" "eastwood.lint"]}

  ;; kibit - suggest idiomatic use of Clojure
  ;; https://github.com/jonase/kibit/issues/221
  :lint/idiom
  {:replace-paths []
   :replace-deps  {tvaughan/kibit-runner {:mvn/version "1.0.1"}}
   :main-opts     ["-m" "kibit-runner.cmdline"]}

  ;; End of Linting/ static analysis
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Visualizing dependencies

  ;; Morpheus - visualize project var relationships
  ;; https://github.com/benedekfazekas/morpheus
  ;; Options:
  ;; -d to specify output directory (this must exist)
  ;; -f to specify image format, dot (default), png or svg
  ;; Options are followed by list of paths to analyze.

  ;; clojure -M:graph/vars -d graphs -f png src test
  :graph/vars
  {:extra-deps {thomasa/morpheus
                {:git/url "https://github.com/benedekfazekas/morpheus.git"
                 :sha     "9d6f2c1ede8be7ab4508065fe6b7e40e0c099ab6"}}
   :main-opts  ["-m" "thomasa.morpheus.main"]}

  ;; Generate PNG image of dependency graph in directory called `graphs`
  ;; clojure -M:graph/vars-png
  :graph/vars-png
  {:extra-deps {thomasa/morpheus
                {:git/url "https://github.com/benedekfazekas/morpheus.git"
                 :sha     "9d6f2c1ede8be7ab4508065fe6b7e40e0c099ab6"}}
   :main-opts  ["-m" "thomasa.morpheus.main"
                "-d" "graphs" "-f" "png" "src" "test"]}

  ;; Generate SVG image of dependency graph in directory called `graphs`
  ;; clojure -M:graph/vars-svg
  :graph/vars-svg
  {:extra-deps {thomasa/morpheus
                {:git/url "https://github.com/benedekfazekas/morpheus.git"
                 :sha     "9d6f2c1ede8be7ab4508065fe6b7e40e0c099ab6"}}
   :main-opts  ["-m" "thomasa.morpheus.main"
                "-d"  "graphs" "-f" "svg" "src" "test"]}

  ;; Visualize connections between library dependencies and project namespaces
  ;; https://github.com/SevereOverfl0w/vizns
  ;; clojure -M:graph/ns-deps
  :graph/ns-deps
  {:extra-deps {io.dominic/vizns {:git/url "https://github.com/SevereOverfl0w/vizns.git"
                                  :sha     "69774e8c29e1c1c691f9922d5c5a6d764374ada3"}}
   :main-opts  ["-m" "io.dominic.vizns.core"]}

  ;; Generate single PNG image of library dependencies
  :graph/ns-deps-png
  {:extra-deps {io.dominic/vizns {:git/url "https://github.com/SevereOverfl0w/vizns.git"
                                  :sha     "69774e8c29e1c1c691f9922d5c5a6d764374ada3"}}
   :main-opts  ["-m" "io.dominic.vizns.core" "single" "-o" "deps-graph.png" "-f" "png"]}

  ;; GraphViz of project dependencies
  ;; https://github.com/clojure/tools.deps.graph
  ;; clojure -T:graph/deps
  :graph/deps
  {:replace-paths []
   :replace-deps  {org.clojure/tools.deps.graph {:mvn/version "1.1.68"}}
   :ns-default    clojure.tools.deps.graph
   :exec-fn       graph
   :exec-args     {:output "project-dependencies-graph.png"
                   :size   true}}

  ;; Visualizing dependencies
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Performance testing

  ;; Benchmarking library for Clojure
  ;; https://github.com/hugoduncan/criterium/
  ;; (require '[criterium.core :refer [bench quick-bench]]) ; require criterium
  ;; (bench (adhoc-expression)) ; timing of a self contained expression
  ;;
  ;; (require '[practicalli/namespace-name]) ; require project source code
  ;; (in-ns 'practicalli/namespace-name)
  ;; (quick-bench (project-function args))
  :performance/benchmark
  {:extra-deps {criterium/criterium {:mvn/version "0.4.6"}}}

  ;; clj-memory-meter
  ;; - see https://github.com/clojure-goes-fast/clj-memory-meter
  ;; - (require '[clj-memory-meter.core :as memory-meter])
  ;; - (memory-meter/measure (your-expression))
  :performance/memory-meter
  {:extra-deps {com.clojure-goes-fast/clj-memory-meter {:mvn/version "0.1.3"}}
   :jvm-opts   ["-Djdk.attach.allowAttachSelf"]}

  ;; End of Performance testing
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Zulip Event announcement
  :community/zulip-event
  {:replace-paths []
   :replace-deps  {clojurians-zulip/feeds
                   {:git/url "https://gitlab.com/clojurians-zulip/feeds.git"
                    :sha     "345a756196d68bde6de0eaa22d217a45f87362b7"}}
   :main-opts     ["-m" "inclined.main"
                   "--ns" "clojurians-zulip.events" "--"]}

  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Services

  ;; https://github.com/kachayev/nasus
  ;; simple zero-configuration command-line HTTP files server. Like Python's SimpleHTTPServer but scalable
  :service/webserver
  {:replace-deps {nasus/nasus {:mvn/version "0.1.7"}}
   :main-opts    ["-m" "http.server"]}

  :service/http
  {:replace-deps {nasus/nasus {:mvn/version "0.1.7"}}
   :main-opts    ["-m" "http.server"]}

  ;; End of Services
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Security

  ;; DEPRECATED
  ;; https://github.com/rm-hull/nvd-clojure
  ;; check all the jars in the classpath for known security vulnerabilities using the
  ;; National Vulnerability Database
  ;; clojure -T:security/nvd "" "$(clojure -Spath)"
  :security/nvd
  {:extra-deps {nvd-clojure/nvd-clojure {:mvn/version "2.6.0"}}
   :main-opts ["-m" "nvd.task.check"]}

  ;; End of Security
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Deprecated

  ;; midje-runner
  ;; https://github.com/miorimmax/midje-runner
  :test/midje
  {:extra-paths ["test"]
   :extra-deps  {midge-runner/midje-runner
                 {:git/url "https://github.com/miorimmax/midje-runner.git"
                  :sha     "ee9c2813e150ae6b3ea41b446b09ba40fc89bdc1"}}
   :main-opts   ["-m" "midje-runner.runner"]}

  ;; uberdeps - https://github.com/tonsky/uberdeps
  ;; recommend depstar until that is migrated into tools.build
  :project/uberdeps
  {:replace-paths []
   :replace-deps  {uberdeps/uberdeps {:mvn/version "1.1.4"}}
   :main-opts     ["-m" "uberdeps.uberjar"]}

  ;; End of Deprecated
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; EXPERIMENTAL - use at your own risk, you have been warned

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Hot loading dependencies - EXPERIMENTAL / APLPHA
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Hot loading is not officially part of tools.deps and could change in future
  ;; https://practical.li/clojure/alternative-tools/clojure-tools/hotload-libraries.html

  ;; Add new deps to a running REPL:
  ;; (require '[clojure.tools.deps.alpha.repl :refer [add-libs]])
  ;; (add-libs 'domain/library {:mvn/version "1.0.1"})
  ;; Git deps
  ;; (require '[clojure.tools.gitlibs :as gitlibs])
  ;; (defn load-master [lib]
  ;;   (let [git (str "https://github.com/" lib ".git")]
  ;;    (add-lib lib {:git/url git :sha (gitlibs/resolve git "master")})))
  ;; - e.g., using the GitHub path (not the usual Maven group/artifact):
  ;; (load-master 'clojure/tools.trace)

  :alpha/hotload-socket
  {:extra-deps {org.clojure/tools.deps.alpha
                ;; Latest commit on add-lib3 branch, don't update with :project/outdated
                {:git/url "https://github.com/clojure/tools.deps.alpha"
                 :sha     "e4fb92eef724fa39e29b39cc2b1a850567d490dd"}
                ;; Set logging implementation to no-operation
                org.slf4j/slf4j-nop {:mvn/version "1.7.36"}}
   ;; DynamicClassLoader required when starting other processes via aliases, e.g. socket REPL or Cognitect's REBL
   :main-opts  ["-e" "(->>(Thread/currentThread)(.getContextClassLoader)(clojure.lang.DynamicClassLoader.)(.setContextClassLoader,(Thread/currentThread)))"]}


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Aliases to evaluate

  ;; Reflector - datafy and nav
  ;; https://github.com/stuarthalloway/reflector

  :alpha/reflect
  {:extra-deps {com.stuarthalloway/reflector
                {:git/url "https://github.com/stuarthalloway/reflector"
                 :sha     "93a0c19b4526c1180959e940202928d35e5c3cef"}}}

  ;; closh - bash shell with Clojure
  :alpha/closh
  {:extra-deps {closh/closh
                {:git/url "https://github.com/dundalek/closh.git"
                 :tag     "v0.5.0"
                 :sha     "b1a7fd310b6511048fbacb8e496f574c8ccfa291"}}
   :main-opts  ["-m" "closh.zero.frontend.rebel"]}


  #_()} ;; End of alias definitions


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Library Repositories

  ;; Specify a different local repository for maven (default `$HOME/.m2/repository)
  ;; :mvn/local-repo ".m2/repository"

  ;; `clojure -Spath` will show the current class path which will include the path to the local maven repository for the library dependencies.

  ;; Order in which repositories are consulted is not guaranteed, so only add essential repositories
  ;; Maven Central and Clojars are the canonical repositories for library dependencies
  ;; JCenter is large and fast mirror often accessible behind corporate firewalls

  :mvn/repos {"central" {:url "https://repo1.maven.org/maven2/"}
              "clojars" {:url "https://repo.clojars.org/"}

             ;; Clojure snapshots
             ;; "sonatype" {:url "https://oss.sonatype.org/content/repositories/snapshots/"}

             ;; Maven Central Google Cloud Storage mirrors
             ;; Americas
             ;; "google-maven-central" {:url "https://maven-central.storage-download.googleapis.com/maven2/"}
             ;; Asia
             ;; "google-maven-central" {:url "https://maven-central-asia.storage-download.googleapis.com/maven2/"}
             ;; Europe
             ;; "google-maven-central" {:url "https://maven-central-eu.storage-download.googleapis.com/maven2/"}

             ;; "clojars-china-mirror" {:url "https://mirrors.tuna.tsinghua.edu.cn/clojars/"}

             ;; Example of local Artifactory repository configuration
             ;; {"business-area" {:url "https://artifacts.internal-server.com:443/artifactory/business-area-maven-local"}

  #_()} ;; End of Library Repositories

 }
