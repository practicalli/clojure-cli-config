;; The deps.edn file describes the information needed to build a classpath.
;; Source: https://github.com/practicalli/clojure-deps-edn
;;
;; deps.edn configuration is a combination of
;; - install-level (latest Clojure version at install time)
;; - user level - $HOME/.clojure/deps.edn
;; - project level - deps.edn in root of project
;;
;; For all attributes other than :paths, these config files are merged left to right.
;; Only the last :paths is kept and others are dropped.
;; In an :alias, only the last :main-opts is kept and others are dropped.

{

 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; Default Paths
 ;; Directories to include in the classpath to run the application
 ;; Development only paths should be defined in aliases, eg. :env/dev
 ;; Project deps.edn file superceeds this setting
 :paths ["src"]

 ;; End of: Default Paths
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; Main dependencies

 :deps
 ;; Clojure standard library
 {org.clojure/clojure {:mvn/version "1.10.1"}}

 ;; End of: Main dependencies
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


 :aliases
 {

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; REPL experience

  ;; Rebel Readline
  ;; Clojure REPL with syntax highlighting, built in docs and a quit command `:repl/quit`
  ;; https://github.com/bhauman/rebel-readline

  ;; clojure -M:repl/rebel
  :repl/rebel
  {:extra-deps {com.bhauman/rebel-readline {:mvn/version "0.1.4"}}
   :main-opts  ["-m" "rebel-readline.main"]}


  ;; ClojureScript REPL - starts the default CLJS repl
  ;; https://github.com/bhauman/rebel-readline/tree/master/rebel-readline-cljs

  ;; clojure -M:repl/rebel-cljs
  :repl/rebel-cljs
  {:extra-deps {com.bhauman/rebel-readline-cljs {:mvn/version "0.1.4"}}
   :main-opts  ["-m" "rebel-readline-cljs.main"]}


  ;; rebel readline with nrepl for editor connection to REPL
  ;; CIDER: run `cider-connect-clj` and expressions evaluated in rebel
  ;; are also available from CIDER/Emacs/Spacemacs

  ;; clojure -M:repl/rebel-nrepl
  :repl/rebel-nrepl
  {:extra-deps {nrepl/nrepl                {:mvn/version "0.8.3"}
                cider/cider-nrepl          {:mvn/version "0.25.5"}
                com.bhauman/rebel-readline {:mvn/version "0.1.4"}}
   :main-opts  ["-m" "nrepl.cmdline"
                "--middleware" "[cider.nrepl/cider-middleware]"
                "-i"
                "-f" "rebel-readline.main/-main"]}


  ;; Run a Clojure repl with reveal and nrepl interactively
  ;; - see :inspect/reveal* for more reveal aliases
  ;; clj -M:repl/reveal-nrepl
  :repl/reveal-nrepl
  {:extra-deps {vlaaad/reveal {:mvn/version "1.1.171"}
                nrepl/nrepl   {:mvn/version "0.8.3"}}
   :main-opts  ["-m" "nrepl.cmdline"
                "--middleware" "[vlaaad.reveal.nrepl/middleware]"
                "-i"]}

  ;; As with :repl/reveal-nrepl with a light theme and 32 point font
  ;; Replace font-family with local font (should be slightly faster startup)
  ;; clj -M:repl/reveal-light-nrepl
  :repl/reveal-light-nrepl
  {:extra-deps {vlaaad/reveal {:mvn/version "1.1.171"}
                nrepl/nrepl   {:mvn/version "0.8.3"}}
   :jvm-opts   ["-Dvlaaad.reveal.prefs={:theme,:light,:font-family,\"https://ff.static.1001fonts.net/u/b/ubuntu.mono.ttf\",:font-size,32}"]
   :main-opts  ["-m" "nrepl.cmdline"
                "--middleware" "[vlaaad.reveal.nrepl/middleware]"
                "-i"]}


  ;; rebel readline with reveal data visualization
  ;; clojure -M:repl/rebel-reveal
  :repl/rebel-reveal
  {:extra-deps
   {vlaaad/reveal              {:mvn/version "1.1.164"}
    com.bhauman/rebel-readline {:mvn/version "0.1.4"}}
   :jvm-opts  ["-Dvlaaad.reveal.prefs={:theme,:light,:font-family,\"https://ff.static.1001fonts.net/u/b/ubuntu.mono.ttf\",:font-size,32}"]
   :main-opts ["-e" "(require,'rebel-readline.core),(require,'rebel-readline.clojure.line-reader),(require,'rebel-readline.clojure.service.local),(require,'rebel-readline.clojure.main),(require,'vlaaad.reveal)(rebel-readline.core/with-line-reader,(rebel-readline.clojure.line-reader/create,(rebel-readline.clojure.service.local/create)),(vlaaad.reveal/repl,:prompt,(fn,[]),:read,(rebel-readline.clojure.main/create-repl-read)))"]
   }




  ;; Development environment
  ;; Include `dev` directory on the class path
  ;; Supports the use of `dev/user.clj` to configure REPL startup
  ;; http://practicalli.github.io/clojure/clojure-tools/configure-repl-startup.html

  ;; clojure -M:env/dev
  :env/dev
  {:extra-paths ["dev"]}

  ;; End of REPL experience
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Alternative REPLs - not tested

  ;; Clojure Socket REPL on port 50505:
  ;; clojure -M:repl/socket
  :repl/socket
  {:jvm-opts ["-Dclojure.server.repl={:port,50505,:accept,clojure.core.server/repl}"]}

  ;; Clojure Socket REPL on an available port, displaying port number (container/cloud environments)
  ;; - specify -r to start a repl
  :repl/socket-zero
  {:jvm-opts  ["-Dclojure.server.repl={:port,0,:accept,clojure.core.server/repl}"]
   :main-opts ["-e" "(.getLocalPort,(get-in,@#'clojure.core.server/servers,[\"repl\",:socket]))"]}

  ;; ClojureScript (node) Socket REPL on port 55555:
  ;; clojure -M:repl/socket-cljs
  :repl/socket-node
  {:jvm-opts ["-Dclojure.server.repl={:port,55555,:accept,cljs.server.node/repl}"]}

  ;; ClojureScript (browser) Socket REPL on port 58585:
  ;; clojure -M:repl/socket-cljs
  :repl/socket-browser
  {:jvm-opts ["-Dclojure.server.repl={:port,58585,:accept,cljs.server.browser/repl}"]}

  ;; tubular - socket repl client
  ;; https://github.com/mfikes/tubular
  ;; Connect to a socket repl, e.g. :repl/socket
  ;; clojure -M:repl/socket-client
  :repl/socket-client
  {:extra-deps {tubular/tubular {:mvn/version "1.4.0"}}
   :main-opts  ["-m" "tubular.core"
                "-p" "55555"]}

  ;; Start a Clojure Socket pREPL on port 40404:
  ;; clojure -M:repl/prepl
  :repl/prepl
  {:jvm-opts ["-Dclojure.server.repl={:port,40404,:accept,clojure.core.server/io-prepl}"]}

  ;; Start a ClojureScript Socket pREPL on port 44444:
  :repl/prepl-cljs
  ;; clojure -M:repl/prepl-cljs
  {:jvm-opts ["-Dclojure.server.repl={:port,44444,:accept,cljs.server.browser/prepl}"]}

  ;; End of Alternative REPL's
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Creating projects from templates

  ;; clj-new - https://github.com/seancorfield/clj-new

  ;; Classic command line
  ;; clojure -M:project/new luminus practicalli/full-stack-app +http-kit +h2 +reagent +auth

  ;; Edn command line arguments
  ;; clojure -X:project/new  ;; library project called playground
  ;; clojure -X:project/new :name practicalli/my-library
  ;; clojure -X:project/new :template app :name practicalli/my-application
  ;; clojure -X:project/new :template luminus :name practicalli/full-stack-app +http-kit +h2 +reagent +auth

  :project/new
  {:replace-deps {seancorfield/clj-new {:mvn/version "1.1.228"}}
   :exec-fn      clj-new/create
   :exec-args    {:template lib :name practicalli/playground}
   :main-opts    ["-m" "clj-new.create"]}

  ;; ALPHA status: Add 'something' to existing project (subject to change)
  :project/add
  {:replace-deps {seancorfield/clj-new {:mvn/version "1.1.228"}}
   :exec-fn      clj-new/generate
   :main-opts    ["-m" "clj-new.generate"]}

  ;; End of: Creating projects from templates
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Project compilation and dependencies

  ;; clj-check - report detailed compilation errors for a project
  ;; https://github.com/athos/clj-check
  ;; clojure -M:project/check

  :project/check
  {:extra-deps {athos/clj-check
                {:git/url "https://github.com/athos/clj-check.git"
                 :sha     "cd1f25456de5eebda0a69602dd3445905382b3a4"}}
   :main-opts  ["-m" "clj-check.check"]}


  ;; find-deps - fuzzy search Maven & Clojars and add deps to deps.edn
  ;; https://github.com/hagmonk/find-deps
  ;; clojure -M:project/find-deps http-kit  # fuzzy search for dependency
  ;; clojure -M:project/find-deps http-kit ring compojure # multiple deps
  ;; clojure -M:project/find-deps -F:merge http-kit # merge dep into deps.edn file
  :project/find-deps
  {:extra-deps
   {find-deps/find-deps
    {:git/url "https://github.com/hagmonk/find-deps"
     :sha     "9bf23a52cb0a8190c9c2c7ad1d796da802f8ce7a"}}
   :main-opts ["-m" "find-deps.core"]}


  ;; Visualizing dependencies in a project
  ;; https://github.com/clojure/tools.deps.graph
  ;; clojure -X:project/graph-deps
  :project/graph-deps
  {:replace-paths []
   :replace-deps  {org.clojure/tools.deps.graph {:mvn/version "1.0.56"}}
   :main-opts     ["-m" "clojure.tools.deps.graph"] ;; deprecated
   :ns-default    clojure.tools.deps.graph
   :exec-fn       graph
   :exec-args     {:output "project-dependencies-graph.png"
                   :size   true}}


  ;; Dependency version management
  ;; https://github.com/liquidz/antq
  ;; Manage versions for maven and git dependencies

  ;; - report project dependencies that have newer versions available:
  ;; cd project-directory && clojure -M:project/outdated
  ;; - update library versions in this deps.edn file:
  ;; cd ~/.clojure && clojure -M:project/outdated
  :project/outdated
  {:replace-paths []
   :replace-deps  {antq/antq {:mvn/version "0.9.3"}}
   :main-opts     ["-m" "antq.core"]}

  :hack/antq
  {:replace-deps
   {antq/antq {:local/root "/home/practicalli/projects/clojure/community-tools/antq"}}
   :main-opts ["-m" "antq.core"]}


  ;; The classic project for checking maven based dependencies
  ;; clojure -M:project/outdated-mvn
  :project/outdated-mvn
  {:replace-paths []
   :replace-deps  {deps-ancient/deps-ancient {:mvn/version "RELEASE"}}
   :main-opts     ["-m" "deps-ancient.deps-ancient"]}

  ;; End of: Projects and dependencies
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Project Packaging

  ;; depstar - build jars, uberjars
  ;; https://github.com/seancorfield/depstar
  ;; over-ride the :main-class as the name is unlikely to match your project

  ;; Jar archive of the project
  ;; clojure -X:project/jar :main-class domain.application
  ;; clojure -X:project/jar :jar '"project-name.jar"' :main-class domain.application
  :project/jar
  {:extra-deps {seancorfield/depstar {:mvn/version "1.1.136"}}
   :exec-fn    hf.depstar/jar
   :exec-args  {:jar        "project.jar"
                :aot        true
                :main-class project.core}}

  ;; Uberjar archive of the project, including Clojure runtime
  ;; clojure -X:project/uberjar :main-class domain.application
  ;; clojure -X:project/uberjar :jar '"project-name.jar"' :main-class domain.application
  :project/uberjar
  {:extra-deps {seancorfield/depstar {:mvn/version "1.1.136"}}
   :exec-fn    hf.depstar/uberjar
   :exec-args  {:jar        "uber.jar"
                :aot        true
                :main-class project.core}}


  ;; uberdeps - uberjar builder
  ;; https://github.com/tonsky/uberdeps
  ;; "--target" "target/cdeps-0.1.0.jar" in `:main-opts` to specify output file


  ;; uberdeps reads deps.edn config once running
  :project/uberdeps
  {:replace-paths []
   :replace-deps  {uberdeps/uberdeps {:mvn/version "1.0.3"}}
   :main-opts     ["-m" "uberdeps.uberjar"]}

  ;; End of project packaging
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Project Deployment
  ;; local and remote deployment of Java archives

  ;; Clojure CLI tools - built in alias to deploy locally (in `~/.m2/`)
  ;; clojure -X:deps mvn-install


  ;; deps-deploy - Deploy libraries to Clojars
  ;; https://github.com/slipset/deps-deploy
  ;; Deploy to Clojars
  ;; `clojure -M:project/clojars project.jar`
  ;; Deploy to Clojars signed
  ;; `clojure -M:project/clojars-signed project.jar`
  ;;
  ;; Set Clojars username/token in `CLOJARS_USERNAME` and `CLOJARS_PASSWORD`
  ;; environment variables.
  ;; Set fully qualified artifact-name and version in project `pom.xml` file

  :project/clojars
  {:replace-paths []
   :replace-deps  {slipset/deps-deploy {:mvn/version "RELEASE"}}
   :main-opts     ["-m" "deps-deploy.deps-deploy"
                   "deploy"]}

  :project/clojars-signed
  {:replace-paths []
   :replace-deps  {slipset/deps-deploy {:mvn/version "RELEASE"}}
   :main-opts     ["-m" "deps-deploy.deps-deploy"
                   "deploy"
                   :true]}

  ;; DEPRECATED - use `clojure -X:deps mvn-install`
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Add the path to the jar for deployment to simplify command
  ;; :deploy-locally
  ;; {:extra-deps {deps-deploy/deps-deploy {:mvn/version "RELEASE"}}
  ;;  :main-opts  ["-m" "deps-deploy.deps-deploy"
  ;;               "install"
  ;;               "path/to/my.jar"]}

  ;; {:deploy-clojars
  ;;  {:extra-deps {deps-deploy/deps-deploy {:mvn/version "RELEASE"}}
  ;;   :main-opts  ["-m" "deps-deploy.deps-deploy"
  ;;                "deploy"
  ;;               "path/to/my.jar"]}}

  ;; End of Project Deployment
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;





  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Java Sources

  ;; Look up Java Class and method definitions, eg. `cider-find-var` in Emacs
  ;; Requires: Java sources installed locally
  ;; Examples are from Ubuntu package install locations

  ;; clojure -M:lib/java11-source
  :lib/java8-source
  {:extra-deps
   {openjdk/java-sources {:local/root "/usr/lib/jvm/openjdk-8/lib/src.zip"}}}

  :lib/java11-source
  {:extra-deps
   {openjdk/java-sources {:local/root "/usr/lib/jvm/openjdk-11/lib/src.zip"}}}

  ;; End of: Java Sources
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Databases and drivers uses only during development

  ;; H2 embedded database
  :database/h2
  {:extra-deps {com.h2database/h2      {:mvn/version "1.4.200"}
                seancorfield/next.jdbc {:mvn/version "1.1.613"}}}

  ;; End of Databases and drivers uses only during development
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Data inspectors / visualizers

  ;; Portal
  ;; Navigate data - edn, json, transit
  ;; https://github.com/djblue/portal

  :inspect/portal-cli
  {:extra-deps {djblue/portal {:mvn/version "0.7.0"}}}

  :inspect/portal-web
  {:extra-deps {djblue/portal             {:mvn/version "0.7.0"}
                org.clojure/clojurescript {:mvn/version "1.10.773"}}
   :main-opts  ["-m" "cljs.main"]}

  :inspect/portal-node
  {:extra-deps {djblue/portal             {:mvn/version "0.7.0"}
                org.clojure/clojurescript {:mvn/version "1.10.773"}}
   :main-opts  ["-m" "cljs.main" "-re" "node"]}


  ;; REBL Data browser
  ;; https://github.com/practicalli/clojure-deps-edn#cognitect-rebl
  ;; http://practicalli.github.io/clojure/alternative-tools/clojure-tools/cognitect-rebl.html
  ;; Requires Clojure 1.10 or greater
  ;; Requires Cognitect dev-tools https://cognitect.com/dev-tools/index.html
  ;; :inspect/rebl-java8   (Oracle JDK 8 only)
  ;; :inspect/rebl         (Any JDK 11 distribution - tested with OpenJDK)

  :inspect/rebl
  {:extra-deps {com.cognitect/rebl          {:mvn/version "0.9.241"}
                org.clojure/core.async      {:mvn/version "1.3.610"}
                org.openjfx/javafx-fxml     {:mvn/version "11.0.1"}
                org.openjfx/javafx-controls {:mvn/version "11.0.1"}
                org.openjfx/javafx-swing    {:mvn/version "11.0.1"}
                org.openjfx/javafx-base     {:mvn/version "11.0.1"}
                org.openjfx/javafx-web      {:mvn/version "11.0.1"}
                ;; deps for file datafication (REBL 0.9.149 or later)
                org.clojure/data.csv        {:mvn/version "1.0.0"}
                org.clojure/data.json       {:mvn/version "1.0.0"}
                org.yaml/snakeyaml          {:mvn/version "1.27"}}
   :main-opts  ["-m" "cognitect.rebl"]}

  :inspect/rebl-java8
  {:extra-deps {com.cognitect/rebl {:mvn/version "0.9.241"}}
   :main-opts  ["-m" "cognitect.rebl"]}


  ;; Reveal - read evaluate visualize loop
  ;; A REPL environment with data visualization and exploration
  ;; http://practicalli.github.io/clojure/clojure-tools/data-browsers/reveal.html
  ;; clojure -M:inspect/reveal
  ;; clojure -X:inspect/reveal
  ;; Run with theme / font changes:
  ;; clojure -M:inspect/reveal-light
  ;; Use with rebel repl by adding and using tap>
  ;; clojure -M:inspect/reveal:repl/rebel
  ;; clojure -M:inspect/reveal:rebel -J-Dvlaaad.reveal.prefs='{:theme :light :font-family "Ubuntu Mono" :font-size 32}'

  :inspect/reveal
  {:extra-deps {vlaaad/reveal {:mvn/version "1.1.171"}}
   :ns-default vlaaad.reveal
   :exec-fn    repl
   :main-opts  ["-m" "vlaaad.reveal" "repl"]}

  :inspect/reveal-light
  {:extra-deps {vlaaad/reveal {:mvn/version "1.1.171"}}
   :ns-default vlaaad.reveal
   :exec-fn    repl
   :jvm-opts   ["-Dvlaaad.reveal.prefs={:theme,:light,:font-family,\"https://ff.static.1001fonts.net/u/b/ubuntu.mono.ttf\",:font-size,32}"]
   :main-opts  ["-m" "vlaaad.reveal" "repl"]}


  ;; rebel readline with reveal data visualization
  ;; clojure -M:inspect/reveal-rebel
  :inspect/reveal-rebel
  {:extra-deps
   {vlaaad/reveal              {:mvn/version "1.1.171"}
    com.bhauman/rebel-readline {:mvn/version "0.1.4"}}
   :main-opts ["-e" "(require,'rebel-readline.core),(require,'rebel-readline.clojure.line-reader),(require,'rebel-readline.clojure.service.local),(require,'rebel-readline.clojure.main),(require,'vlaaad.reveal)(rebel-readline.core/with-line-reader,(rebel-readline.clojure.line-reader/create,(rebel-readline.clojure.service.local/create)),(vlaaad.reveal/repl,:prompt,(fn,[]),:read,(rebel-readline.clojure.main/create-repl-read)))"]}

  ;; clojure -M:inspect/reveal-light-rebel
  :inspect/reveal-light-rebel
  {:extra-deps
   {vlaaad/reveal              {:mvn/version "1.1.171"}
    com.bhauman/rebel-readline {:mvn/version "0.1.4"}}
   :jvm-opts  ["-Dvlaaad.reveal.prefs={:theme,:light,:font-family,\"https://ff.static.1001fonts.net/u/b/ubuntu.mono.ttf\",:font-size,32}"]
   :main-opts ["-e" "(require,'rebel-readline.core),(require,'rebel-readline.clojure.line-reader),(require,'rebel-readline.clojure.service.local),(require,'rebel-readline.clojure.main),(require,'vlaaad.reveal)(rebel-readline.core/with-line-reader,(rebel-readline.clojure.line-reader/create,(rebel-readline.clojure.service.local/create)),(vlaaad.reveal/repl,:prompt,(fn,[]),:read,(rebel-readline.clojure.main/create-repl-read)))"]}

  ;; Not sending all evaluations to Reveal
  ;; It does send tap> results to Reveal
  ;; :repl/reveal-rebel-nrepl
  ;; {:extra-deps {nrepl/nrepl                {:mvn/version "0.8.3"}
  ;;               cider/cider-nrepl          {:mvn/version "0.25.5"}
  ;;               vlaaad/reveal              {:mvn/version "1.1.171"}
  ;;               com.bhauman/rebel-readline {:mvn/version "0.1.4"}}
  ;;  :jvm-opts   ["-Dvlaaad.reveal.prefs={:theme,:light,:font-family,\"https://ff.static.1001fonts.net/u/b/ubuntu.mono.ttf\",:font-size,32}"]
  ;;  :main-opts  ["-m" "nrepl.cmdline"
  ;;               "--middleware" "[cider.nrepl/cider-middleware,vlaaad.reveal.nrepl/middleware]"
  ;;               "-f" "rebel-readline.main/-main"]}


  :inspect/reveal-local ;; Hacking the project
  {:extra-deps {vlaaad/reveal
                {:local/root "/home/practicalli/projects/clojure/visualization/reveal/"}}
   :main-opts  ["-m" "vlaaad.reveal" "repl"]}

  ;; Reveal REPL with nrepl server, connect to from a Clojure aware editor
  ;; clj -M:inspect/reveal-nrepl
  :inspect/reveal-nrepl
  {:extra-deps {vlaaad/reveal {:mvn/version "1.1.171"}
                nrepl/nrepl   {:mvn/version "0.8.3"}}
   :main-opts  ["-m" "nrepl.cmdline"
                "--middleware" "[vlaaad.reveal.nrepl/middleware]"]}

  ;; Light version of :inspect/reveal-nrepl
  :inspect/reveal-light-nrepl
  {:extra-deps {vlaaad/reveal {:mvn/version "1.1.171"}
                nrepl/nrepl   {:mvn/version "0.8.3"}}
   :jvm-opts   ["-Dvlaaad.reveal.prefs={:theme,:light,:font-family,\"https://ff.static.1001fonts.net/u/b/ubuntu.mono.ttf\",:font-size,32}"]
   :main-opts  ["-m" "nrepl.cmdline"
                "--middleware" "[vlaaad.reveal.nrepl/middleware]"]}

  ;; Reveal REPL with nrepl server and Emacs CIDER specific middleware
  ;; Use with `C-u cider-jack-in-clj` or `SPC u , '` on Spacemacs
  ;; Edit jack-in command: clojure -M:inspect/reveal-nrepl-cider
  :inspect/reveal-nrepl-cider
  {:extra-deps {vlaaad/reveal                 {:mvn/version "1.1.171"}
                nrepl/nrepl                   {:mvn/version "0.8.3"}
                cider/cider-nrepl             {:mvn/version "0.25.5"}
                refactor-nrepl/refactor-nrepl {:mvn/version "2.5.0"}}
   :main-opts  ["-m" "nrepl.cmdline"
                "--middleware" "[vlaaad.reveal.nrepl/middleware,refactor-nrepl.middleware/wrap-refactor,cider.nrepl/cider-middleware]"]}

  ;; Light version of :inspect/reveal-nrepl-cider
  :inspect/reveal-light-nrepl-cider
  {:extra-deps {vlaaad/reveal                 {:mvn/version "1.1.171"}
                nrepl/nrepl                   {:mvn/version "0.8.3"}
                cider/cider-nrepl             {:mvn/version "0.25.5"}
                refactor-nrepl/refactor-nrepl {:mvn/version "2.5.0"}}
   :jvm-opts   ["-Dvlaaad.reveal.prefs={:theme,:light,:font-family,\"https://ff.static.1001fonts.net/u/b/ubuntu.mono.ttf\",:font-size,32}"]
   :main-opts  ["-m" "nrepl.cmdline"
                "--middleware" "[vlaaad.reveal.nrepl/middleware,refactor-nrepl.middleware/wrap-refactor,cider.nrepl/cider-middleware]"]}



  ;; End of data browsers
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Middleware

  ;; - start an interactive REPL with a headless nREPL server
  ;; clojure -M:middleware/nrepl
  :middleware/nrepl {:extra-deps {nrepl/nrepl {:mvn/version "0.8.3"}}
                     :main-opts  ["-m" "nrepl.cmdline" "-i"]}

  ;; Run a REPL using nREPL server for access by cider-connect-clj
  ;; clojure -M:middleware/cider-clj
  :middleware/cider-clj
  {:extra-deps {nrepl/nrepl       {:mvn/version "0.8.3"}
                cider/cider-nrepl {:mvn/version "0.25.5"}}
   :main-opts  ["-m" "nrepl.cmdline"
                "--middleware" "[cider.nrepl/cider-middleware]"]}

  :middleware/cider-clj-refactor
  {:extra-deps {nrepl/nrepl                   {:mvn/version "0.8.3"}
                refactor-nrepl/refactor-nrepl {:mvn/version "2.5.0"}
                cider/cider-nrepl             {:mvn/version "0.25.5"}}
   :main-opts  ["-m" "nrepl.cmdline"
                "--middleware" "[refactor-nrepl.middleware/wrap-refactor,cider.nrepl/cider-middleware]"]}


  ;; Run a REPL using nREPL server for access by cider-connect-cljs
  ;; clojure -M:middleware/cider-cljs
  :middleware/cider-cljs
  {:extra-deps {org.clojure/clojurescript {:mvn/version "1.10.773"}
                nrepl/nrepl               {:mvn/version "0.8.3"}
                cider/cider-nrepl         {:mvn/version "0.25.5"}
                cider/piggieback          {:mvn/version "0.5.2"}}
   :main-opts  ["-m" "nrepl.cmdline"
                "--middleware" "[cider.nrepl/cider-middleware,cider.piggieback/wrap-cljs-repl]"]}


  ;; nrebl.middleware - REBL with nREPL server
  ;; visualize evaluations over nREPL in REBL data browser (CIDER, Calva)
  ;; https://github.com/RickMoynihan/nrebl.middleware
  ;; Emacs cider `dir-locals.el` configuration
  ;; ((clojure-mode . ((cider-clojure-cli-global-options . "-M:lib/cider-nrepl:inspect/rebl:middleware/nrebl"))))

  ;; clojure -M:lib/cider-nrepl:inspect/rebl:middleware/nrebl
  :middleware/nrebl
  {:extra-deps {rickmoynihan/nrebl.middleware {:mvn/version "0.3.1"}}
   :main-opts  ["-e" "((requiring-resolve,'cognitect.rebl/ui))"
                "-m" "nrepl.cmdline"
                "-i"
                "--middleware" "[nrebl.middleware/wrap-nrebl,cider.nrepl/cider-middleware]"]}

  ;; Supporting aliases for nrebl.middleware

  :lib/cider-nrepl
  {:extra-deps {nrepl/nrepl                   {:mvn/version "0.8.3"}
                cider/cider-nrepl             {:mvn/version "0.25.5"}
                refactor-nrepl/refactor-nrepl {:mvn/version "2.5.0"}}}


  ;; End of: Middleware
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Clojure Specifications

  ;; Clojure spec test.check (clojure spec included in Clojure 1.9 onwards)

  :lib/spec-test
  {:extra-deps
   {org.clojure/test.check {:mvn/version "1.1.0"}}}


  ;; Clojure spec 2 - under active development
  ;; https://github.com/clojure/spec-alpha2
  ;; latest commit SHA is returned by the command
  ;; git ls-remote https://github.com/clojure/spec-alpha2.git refs/heads/master

  :lib/spec2
  {:extra-deps {org.clojure/spec-alpha2
                {:git/url "https://github.com/clojure/spec-alpha2"
                 :sha     "cd07a40c4ee720614a18429da4b09a6c5d8fe979"}}}

  ;; End of Clojure Specifications
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Testing frameworks

  ;; Include the test directory as a path used by Clojure CLI tools
  :env/test
  {:extra-paths ["test"]
   :extra-deps  {org.clojure/test.check {:mvn/version "1.1.0"}}}


  ;; Expectations test framework
  ;; https://github.com/clojure-expectations/clojure-test
  ;; Example usage:
  ;; clojure -A:expectations:test-runner-cognitect

  :lib/expectations
  {:extra-deps {expectations/clojure-test {:mvn/version "1.2.1"}}}


  ;; Classic version not compatible with clojure.test and tools
  ;; https://github.com/clojure-expectations/expectations

  :lib/expectations-classic
  {:extra-deps {expectations/expectations {:mvn/version "2.1.10"}}}

  ;; End of: Testing frameworks
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Test runners

  ;; Cognitect test-runner
  ;; https://github.com/cognitect-labs/test-runner

  :test/cognitect
  {:extra-paths ["test"]
   :extra-deps  {com.cognitect/test-runner
                 {:git/url "https://github.com/cognitect-labs/test-runner.git"
                  :sha     "b6b3193fcc42659d7e46ecd1884a228993441182"}}
   :main-opts   ["-m" "cognitect.test-runner"]}

  ;; Compiling tests before running - automate Ahead of Time compilation
  ;; Use the above alias and over-ride the :main-opts on the command line
  ;; clojure -M:test/cognitect -e "(compile, 'your.namespace)" -m cognitect.test-runner
  ;; Or use the following alias in your project deps.edn
  ;;Example only - change to specific namespace in :main-opts before use
  :test/cognitect-precompile
  {:extra-paths ["test"]
   :extra-deps  {com.cognitect/test-runner
                 {:git/url "https://github.com/cognitect-labs/test-runner.git"
                  :sha     "b6b3193fcc42659d7e46ecd1884a228993441182"}}
   :main-opts   ["-e" "(compile,'your.namespace-here)"
                 "-m" "cognitect.test-runner"]}


  ;; ClojureScript test runner
  ;; https://github.com/Olical/cljs-test-runner

  :test/cljs
  {:extra-paths ["test"]
   :extra-deps  {olical/cljs-test-runner {:mvn/version "3.8.0"}}
   :main-opts   ["-m" "cljs-test-runner.main"]}


  ;; kaocha - comprehensive test runner for Clojure/Script
  ;; tests.edn should be created for each project
  ;; https://github.com/lambdaisland/kaocha

  ;; Default test runner using kaocha (change to your own preference)
  ;; clojure -M:test/runner
  :test/runner
  {:extra-paths ["test"]
   :extra-deps  {lambdaisland/kaocha {:mvn/version "1.0.732"}}
   :main-opts   ["-m" "kaocha.runner"]}

  ;; clojure -M:env/test:test/kaocha
  :test/kaocha
  {:extra-paths ["test"]
   :extra-deps  {lambdaisland/kaocha {:mvn/version "1.0.732"}}
   :main-opts   ["-m" "kaocha.runner"]}


  ;; clojure -M:test/kaocha-cljs
  :test/kaocha-cljs
  {:extra-paths ["test"]
   :extra-deps  {lambdaisland/kaocha      {:mvn/version "1.0.732"}
                 lambdaisland/kaocha-cljs {:mvn/version "1.0.71"}}
   :main-opts   ["-m" "kaocha.runner"]}

  ;; https://github.com/lambdaisland/kaocha-cucumber
  ;; clojure -M:test/kaocha-cucumber
  :test/kaocha-cucumber
  {:extra-paths ["test"]
   :extra-deps  {lambdaisland/kaocha          {:mvn/version "1.0.732"}
                 lambdaisland/kaocha-cucumber {:mvn/version "0.0.53"}}
   :main-opts   ["-m" "kaocha.runner"]}

  ;; https://github.com/lambdaisland/kaocha-junit-xml
  ;; clojure -M:test/kaocha-junit-xml
  :test/kaocha-junit-xml
  {:extra-paths ["test"]
   :extra-deps  {lambdaisland/kaocha           {:mvn/version "1.0.732"}
                 lambdaisland/kaocha-junit-xml {:mvn/version "0.0.76"}}
   :main-opts   ["-m" "kaocha.runner"]}


  ;; https://github.com/lambdaisland/kaocha-cloverage
  ;; clojure -M:test/kaocha-cloverage
  :test/kaocha-cloverage
  {:extra-paths ["test"]
   :extra-deps  {lambdaisland/kaocha           {:mvn/version "1.0.732"}
                 lambdaisland/kaocha-cloverage {:mvn/version "1.0.75"}}
   :main-opts   ["-m" "kaocha.runner"]}


  ;; midje-runner
  ;; https://github.com/miorimmax/midje-runner
  ;; WARNING: unqualified library name: midje-runner
  ;; Unqualified names may break soon
  :test/midje
  {:extra-paths ["test"]
   :extra-deps  {midge-runner/midje-runner
                 {:git/url "https://github.com/miorimmax/midje-runner.git"
                  :sha     "ee9c2813e150ae6b3ea41b446b09ba40fc89bdc1"}}
   :main-opts   ["-m" "midje-runner.runner"]}


  ;; eftest - fast and pretty test runner
  ;; There may be a nicer way to do the main-opts - see the Eastwood and kibit issue discussion
  ;; https://github.com/jonase/eastwood/commit/4d1d05cc6de6ce565207d9a3c86864364f53f006

  ;; clojure -M:test/eftest
  :test/eftest
  {:extra-paths ["test"]
   :extra-deps  {eftest/eftest {:mvn/version "0.5.9"}}
   :main-opts   ["-e"  "(require,'[eftest.runner,:refer,[find-tests,run-tests]]),(run-tests,(find-tests,\"test\"))"]}

  ;; End of Test runners
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Test Coverage tools

  ;; Cloverage - Simple clojure coverage tool
  ;; https://github.com/cloverage/cloverage
  ;; In the root of your Clojure project, run the command:
  ;; clojure -M:test/coverage
  ;; clojure -X:test/coverage
  :test/cloverage
  {:extra-paths ["test"]
   :extra-deps  {cloverage/cloverage {:mvn/version "RELEASE"}}
   :main-opts   ["-m" "cloverage.coverage"
                 "--src-ns-path" "src"
                 "--test-ns-path" "test"]
   :exec-fn     cloverage.coverage/run-project
   :exec-args   {:src-ns-path  ["src"]
                 :test-ns-path ["test"]}}

  ;; End of Test Coverage tools
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Linting/ static analysis

  ;; clj-kondo - comprehensive and fast linter
  ;; https://github.com/borkdude/clj-kondo/

  :lint/kondo
  {:extra-deps {clj-kondo/clj-kondo {:mvn/version "RELEASE"}}
   :main-opts  ["-m" "clj-kondo.main" "--lint" "src"]}


  ;; Eastwood - classic lint tool
  ;; https://github.com/jonase/eastwood#running-eastwood-in-a-repl

  :lint/eastwood
  {:extra-deps {jonase/eastwood {:mvn/version "RELEASE"}}
   :main-opts  ["-m" "eastwood.lint"
                "{:source-paths,[\"src\"],:test-paths,[\"test\"]}"]}


  ;; kibit - suggest idiomatic use of Clojure
  ;; https://github.com/jonase/kibit/issues/221

  :lint/idiom
  {:replace-paths []
   :replace-deps  {tvaughan/kibit-runner {:mvn/version "1.0.1"}}
   :main-opts     ["-m" "kibit-runner.cmdline"]}

  ;; End of Linting/ static analysis
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Visualizing dependencies

  ;; TODO: review and evaluate
  ;; :graph {:deps      {org.clojure/tools.deps.graph {:mvn/version "0.2.24"}}
  ;;         :main-opts ["-m" "clojure.tools.deps.graph"]}

  ;; Morpheus - visualize project var relationships
  ;; https://github.com/benedekfazekas/morpheus
  ;; Options:
  ;; -d to specify output directory (this must exist)
  ;; -f to specify image format, dot (default), png or svg
  ;; Options are followed by list of paths to analyze.

  ;; clojure -A:graph-vars -d graphs -f png src test

  :graph/vars
  {:extra-deps {thomasa/morpheus
                {:git/url "https://github.com/benedekfazekas/morpheus.git"
                 :sha     "7f4876ea631a6f5ccee2094d255efd2d1a98ffb6"}}
   :main-opts  ["-m" "thomasa.morpheus.main"]}

  ;; Generate PNG image of dependency graph in directory called `graphs`
  ;; clojure -A:graph-vars-png
  :graph/vars-png
  {:extra-deps {thomasa/morpheus
                {:git/url "https://github.com/benedekfazekas/morpheus.git"
                 :sha     "7f4876ea631a6f5ccee2094d255efd2d1a98ffb6"}}
   :main-opts  ["-m" "thomasa.morpheus.main"
                "-d" "graphs" "-f" "png" "src" "test"]}


  ;; Generate SVG image of dependency graph in directory called `graphs`
  ;; clojure -A:graph-vars-svg
  :graph/vars-svg
  {:extra-deps {thomasa/morpheus
                {:git/url "https://github.com/benedekfazekas/morpheus.git"
                 :sha     "d3decebc1cb9ef697cd34781f9cf83d44a071e85"}}
   :main-opts  ["-m" "thomasa.morpheus.main"
                "-d"  "graphs" "-f" "svg" "src" "test"]}


  ;; Visualize connections between library dependencies and project namespaces
  ;; https://github.com/SevereOverfl0w/vizns

  :graph/deps
  {:extra-deps {io.dominic/vizns {:git/url "https://github.com/SevereOverfl0w/vizns.git"
                                  :sha     "69774e8c29e1c1c691f9922d5c5a6d764374ada3"}}
   :main-opts  ["-m" "io.dominic.vizns.core"]}

  ;; Generate single PNG image of library dependencies
  :graph/deps-png
  {:extra-deps {io.dominic/vizns {:git/url "https://github.com/SevereOverfl0w/vizns.git"
                                  :sha     "69774e8c29e1c1c691f9922d5c5a6d764374ada3"}}
   :main-opts  ["-m" "io.dominic.vizns.core" "single" "-o" "deps-graph.png" "-f" "png"]}

  ;; Visualizing dependencies
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Performance testing

  ;; Benchmarking library for Clojure
  ;; https://github.com/hugoduncan/criterium/
  ;; (require '[criterium.core :refer [bench quick-bench]]) ; require criterium
  ;; (bench (adhoc-expression)) ; timing of a self contained expression
  ;;
  ;; (require '[practicalli/namespace-name]) ; require project source code
  ;; (in-ns 'practicalli/namespace-name)
  ;; (quick-bench (project-function args))

  :performance/benchmark
  {:extra-deps {criterium/criterium {:mvn/version "0.4.6"}}}


  ;; clj-memory-meter
  ;; - see https://github.com/clojure-goes-fast/clj-memory-meter
  ;; - (require '[clj-memory-meter.core :as memory-meter])
  ;; - (memory-meter/measure (your-expression))

  :performance/memory-meter
  {:extra-deps {com.clojure-goes-fast/clj-memory-meter {:mvn/version "0.1.3"}}
   :jvm-opts   ["-Djdk.attach.allowAttachSelf"]}

  ;; End of Performance testing
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Zulip Event announcement

  :community/zulip-event
  {:replace-paths []
   :replace-deps  {clojurians-zulip/feeds
                   {:git/url "https://gitlab.com/clojurians-zulip/feeds.git"
                    :sha     "002335d93e937bfb56d1c9f5c6760bef885a58b8"}}
   :main-opts     ["-m" "inclined.main"
                   "--ns" "clojurians-zulip.events" "--"]}

  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; EXPERIMENTAL - use at your own risk, you have been warned

  ;; Carve - search through code for unused vars and remove them
  :alpha/carve
  {:extra-deps {borkdude/carve
                {:git/url "https://github.com/borkdude/carve"
                 :sha     "af7004dab7000ad7e9c942499f269cf7d21c0728"}}
   :main-opts  ["-m" "carve.main"]}
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Hot loading dependencies - EXPERIMENTAL / APLPHA
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Hot loading is not officially part of tools.deps and
  ;; this alias could change significantly in future

  ;; Add new deps to a running REPL:
  ;; (require '[clojure.tools.deps.alpha.repl :refer [add-lib]])
  ;; (add-lib 'domain/library {:mvn/version "RELEASE"})
  ;; Git deps
  ;; (require '[clojure.tools.gitlibs :as gitlibs])
  ;; (defn load-master [lib]
  ;;   (let [git (str "https://github.com/" lib ".git")]
  ;;    (add-lib lib {:git/url git :sha (gitlibs/resolve git "master")})))
  ;; - e.g., using the GitHub path (not the usual Maven group/artifact):
  ;; (load-master 'clojure/tools.trace)
  :alpha/hot-load
  {:extra-deps {org.clojure/tools.deps.alpha
                {:git/url "https://github.com/clojure/tools.deps.alpha"
                 :sha     "ada6944e1bf949f9e2ed5291a6fd45e5c4628392"}}
   ;; DynamicClassLoader required for add-lib to work
   ;; if starting other processes via aliases such as a socket REPL or Cognitect's REBL
   :main-opts  ["-e" "(->>(Thread/currentThread)(.getContextClassLoader)(clojure.lang.DynamicClassLoader.)(.setContextClassLoader,(Thread/currentThread)))"]}

  ;;  End of EXPERIMENTAL
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Aliases to evaluate

  ;; Reflector - datafy and nav
  ;; https://github.com/stuarthalloway/reflector

  :alpha/reflect
  {:extra-deps {com.stuarthalloway/reflector
                {:git/url "https://github.com/stuarthalloway/reflector"
                 :sha     "93a0c19b4526c1180959e940202928d35e5c3cef"}}}


  ;; - see https://github.com/athos/clj-check
  :alpha/check
  {:extra-deps {athos/clj-check
                {:git/url "https://github.com/athos/clj-check"
                 :sha     "0f734f560dd989b2ec0f9078cc646476bfdab4e1"}}
   :main-opts  ["-m" "clj-check.check"]}


  ;; closh - bash shell with Clojure
  :alpha/closh
  {:extra-deps {closh/closh
                {:git/url "https://github.com/dundalek/closh.git"
                 :tag     "v0.5.0"
                 :sha     "dec68b43a66ff8547e4742fa433c4d486f550e60"}}
   :main-opts  ["-m" "closh.zero.frontend.rebel"]}



  } ;; End of alias definitions


 ;; Library Repositories
 ;; Order in which repositories are consulted is not guaranteed, so only add essential repositories
 ;; Maven Central and Clojars are the canonical repositories for library dependencies
 ;; JCenter is large and fast mirror often accessible behind corporate firewalls

 :mvn/repos {"central" {:url "https://repo1.maven.org/maven2/"}
             "clojars" {:url "https://repo.clojars.org/"}

             ;; Clojure snapshots
             ;; "sonatype" {:url "https://oss.sonatype.org/content/repositories/snapshots/"}

             ;; clojars.org mirror - publicly accessible
             ;; "jcenter" {:url "https://jcenter.bintray.com"}

             ;; Maven Central Google Cloud Storage mirrors
             ;; Americas
             ;; "google-maven-central" {:url "https://maven-central.storage-download.googleapis.com/maven2/"}
             ;; Asia
             ;; "google-maven-central" {:url "https://maven-central-asia.storage-download.googleapis.com/maven2/"}
             ;; Europe
             ;; "google-maven-central" {:url "https://maven-central-eu.storage-download.googleapis.com/maven2/"}

             ;; "clojars-china-mirror" {:url "https://mirrors.tuna.tsinghua.edu.cn/clojars/"}

             ;; Example of local Artifactory repository configuration
             ;; {"business-area" {:url "https://artifacts.internal-server.com:443/artifactory/business-area-maven-local"}
             }}
